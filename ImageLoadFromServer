public class Example extends Activity {
 
	ImageView product_image;
	Button upload_bt;
	EditText product_name, product_detail, product_price;
	RadioButton method_all, method_ptop, method_post;
	ProgressDialog mProgressDialog;
 
	public static final int TAKE_PHOTO_REQUEST = 1;
	public static final int PICK_PHOTO_REQUEST = 2;
	public static final int MEDIA_TYPE_IMAGE = 3;
	public static final String PRODUCT_TYPE = "PS";
 
	private String url = "This is your own server URL ex. http://200.200.20.20:8888/package/class/servlet";
 
	Uri pictureUri;
	byte[] fileBytes = {0}; // Initialization
	Context context;
	String imagepath, degree, category, status, method, pro_name, pro_detail, pro_price;
 
	protected DialogInterface.OnClickListener mDialogListener = new DialogInterface.OnClickListener() {
		@Override
		public void onClick(DialogInterface dialog, int which) {
			switch (which) {
			case 0: // Take picture
				Intent intent = new Intent(); // Not working
				intent.setAction(android.provider.MediaStore.ACTION_IMAGE_CAPTURE);
				pictureUri = getOutputMediaFileUri(MEDIA_TYPE_IMAGE);
				if (pictureUri == null) {
 
				} else {
					intent.putExtra(MediaStore.EXTRA_OUTPUT, pictureUri);
					startActivityForResult(intent, TAKE_PHOTO_REQUEST);
				}
				break;
			case 1: // Choose picture
				Uri uri = android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI; // 외장메모리
				Intent intent2 = new Intent(Intent.ACTION_PICK, uri);
				startActivityForResult(intent2, PICK_PHOTO_REQUEST);
				break;
			default:
				Uri uri2 = android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI;
				Intent shareIntent = new Intent();
				shareIntent.setAction(Intent.ACTION_SEND);
				shareIntent.putExtra(Intent.EXTRA_STREAM, uri2);
				shareIntent.setType("image/jpeg");
 
			}
		}
 
		private Uri getOutputMediaFileUri(int mediaType) {
			
			if (isExternalStorageAvailable()) {
				String appName = EnrollProduct.this.getString(R.string.app_name);
				File mediaStorageDir = new File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES), appName);
				if (!mediaStorageDir.exists()) {
					if (!mediaStorageDir.mkdirs()) {
						return null;
					}
				}
 
				File mediaFile = null;
 
				String path = mediaStorageDir.getPath() + File.separator;
				if (mediaType == MEDIA_TYPE_IMAGE) {
					imagepath = path + "IMG_" + System.currentTimeMillis() + ".jpg";
					mediaFile = new File(imagepath);
				} else {
					return null;
				}
 
				return Uri.fromFile(mediaFile);
			} else {
				return null;
			}
		}
 
		private boolean isExternalStorageAvailable() {
			String state = Environment.getExternalStorageState();
 
			if (state.equals(Environment.MEDIA_MOUNTED)) {
				return true;
			} else {
				return false;
			}
		}
	};
 
	dbHelper helper;
	SQLiteDatabase db;
	String user_id;
	String user_pw;
	String price = "";
 
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.enroll_product);
 
		helper = new dbHelper(this);
		db = helper.getWritableDatabase();
 
		Cursor c = db.rawQuery(" select user_id from userInfo ", null);
 
		while (c.moveToNext()) {
			user_id = c.getString(0).toString();
		}
		context = this;
 
		product_image = (ImageView) findViewById(R.id.product_pic);
		product_image.setOnClickListener(new OnClickListener() {
 
			@Override
			public void onClick(View v) {
				AlertDialog.Builder builder = new AlertDialog.Builder(Example.this);
				builder.setItems(R.array.camera_choices, mDialogListener);
				builder.setCancelable(true); // cancel available
				AlertDialog dialog = builder.create();
				dialog.show();
			}
		});
 
		Spinner category_spinner = (Spinner) findViewById(R.id.product_category_spinner);
		ArrayAdapter<CharSequence> category_adapter = ArrayAdapter.createFromResource(
				this, // Current context
				R.array.category_array, // Message
				android.R.layout.simple_spinner_item); // Type
		category_adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
		category_spinner.setAdapter(category_adapter);
		category_spinner
		.setOnItemSelectedListener(new OnItemSelectedListener() {
			@Override
			public void onItemSelected(AdapterView<?> parent, View view, int pos, long id) {
				category = (String) parent.getSelectedItem();
			}
			@Override
			public void onNothingSelected(AdapterView<?> parent) {
				category = (String) parent.getSelectedItem();
			}
		});
 
		product_name = (EditText) findViewById(R.id.product_name);
 
		Spinner status_spinner = (Spinner) findViewById(R.id.product_status_spinner);
		ArrayAdapter<CharSequence> status_adapter = ArrayAdapter.createFromResource(
				this, R.array.status_array,
				android.R.layout.simple_spinner_item);
		status_adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
		status_spinner.setAdapter(status_adapter);
		status_spinner
		.setOnItemSelectedListener(new OnItemSelectedListener() {
			@Override
			public void onItemSelected(AdapterView<?> parent, View view, int pos, long id) {
				status = (String) parent.getSelectedItem();
			}
 
			@Override
			public void onNothingSelected(AdapterView<?> parent) {
				status = (String) parent.getSelectedItem();
			}
		});
 
		product_price = (EditText) findViewById(R.id.product_price);
		product_price.addTextChangedListener(new TextWatcher() {
 
			@Override
			public void onTextChanged(CharSequence s, int start, int before, int count) {
				DecimalFormat df = new DecimalFormat("###,###");
				if (!s.toString().equals(price)) {
					price = df.format(Long.parseLong(s.toString().replaceAll(",", "")))+"";
					product_price.setText(price);
					product_price.setSelection(price.length());
				}
			}
 
			@Override
			public void beforeTextChanged(CharSequence s, int start, int count,
					int after) {
				// TODO Auto-generated method stub
			}
 
			@Override
			public void afterTextChanged(Editable s) {
			}
		});
 
		method_all = (RadioButton) findViewById(R.id.method_all);
 
		method_all.setChecked(true);
		method = "무관";
 
		method_all.setOnClickListener(new OnClickListener() {
			public void onClick(View v) {
				method = "무관";
			}
		});
 
		method_ptop = (RadioButton) findViewById(R.id.method_ptop);
		method_ptop.setOnClickListener(new OnClickListener() {
			public void onClick(View v) {
				method = "direct";
			}
		});
 
		method_post = (RadioButton) findViewById(R.id.method_post);
		method_post.setOnClickListener(new OnClickListener() {
			public void onClick(View v) {
				method = "logistic";
			}
		});
 
		product_detail = (EditText) findViewById(R.id.product_detail);
 
		upload_bt = (Button) findViewById(R.id.product_register);
		upload_bt.setOnClickListener(new OnClickListener() {
 
			@Override
			public void onClick(View v) {
				String s = System.currentTimeMillis() + "";
				if(product_name.getText().toString().trim().length() == 0){
					Toast.makeText(EnrollProduct.this, "Put the title in Name section", Toast.LENGTH_SHORT).show();
					return;
				}else if(product_detail.getText().toString().trim().length() == 0){
					Toast.makeText(EnrollProduct.this, "Put the details in Description section", Toast.LENGTH_SHORT).show();
					return;
				}else if(product_price.getText().toString().trim().length() == 0){
					Toast.makeText(EnrollProduct.this, "Put the price in Price section", Toast.LENGTH_SHORT).show();
					return;
				}else if(fileBytes.length <= 5){
					Toast.makeText(EnrollProduct.this, "Put the image file in Image section", Toast.LENGTH_SHORT).show();
					return;
				}
				// text and image file will be sent through this function
				PictureUpload p = new PictureUpload(context, fileBytes);
				String[] params = new String[] { url, 
						product_name.getText().toString(),
						product_detail.getText().toString(), 
						product_price.getText().toString(), 
						user_id, 
						s, 
						PRODUCT_TYPE,
						degree, 
						category, 
						status, 
						method};
				p.execute(params);
 
			}
		});
 
		Intent intent = getIntent();
		if(intent.getType().toString().startsWith("image/")){
			handleSendImage(intent);
		}
	}
 
	// Share
	public void handleSendImage(Intent intent){
		
		Uri imageUri = (Uri) intent.getParcelableExtra(Intent.EXTRA_STREAM);
		
		if(imageUri != null){
			
			ExifInterface exif = null;
			int degree = 0;
			
			fileBytes = ImageVolumeResizing.reduceImageForUpload(ImageVolumeResizing.getByteArrayFromFile(this, imageUri, product_image));
			try{
				exif = new ExifInterface(getRealPathFromURI(this, imageUri));
				// Obtain the degrees for the image then change it to be 0
				int exifOrientation = exif.getAttributeInt(
						ExifInterface.TAG_ORIENTATION, ExifInterface.ORIENTATION_NORMAL);
				degree = exifOrientationToDegrees(exifOrientation);
			}catch(Exception e){
				e.printStackTrace();
			}
			BitmapFactory.Options options = new BitmapFactory.Options();
			options.inPurgeable = true;
			options.inJustDecodeBounds = false;
			Bitmap b = BitmapFactory.decodeByteArray(fileBytes, 0, fileBytes.length, options);
 
			Matrix m = new Matrix();
			m.setRotate(degree, (float) b.getWidth() / 2, (float) b.getHeight() / 2);
 
			b = Bitmap.createBitmap(b, 0, 0, b.getWidth(), b.getHeight(), m, true);
 
			this.degree = ""+degree;
			Picasso.with(this).load(imageUri).resize(640, 640).centerCrop().noFade().into(product_image);
			// Picasso is a library I used for my application
		}
	}
 
	// Image's degree rotation
	public int exifOrientationToDegrees(int exifOrientation) {
		if (exifOrientation == ExifInterface.ORIENTATION_ROTATE_90) {
			return 90;
		} else if (exifOrientation == ExifInterface.ORIENTATION_ROTATE_180) {
			return 180;
		} else if (exifOrientation == ExifInterface.ORIENTATION_ROTATE_270) {
			return 270;
		}
		return 0;
	}
 
	// Get the path (real path of the image file)
	public String getRealPathFromURI(Context context, Uri contentUri) {
		Cursor cursor = null;
		try { 
			String[] proj = { MediaStore.Images.Media.DATA };
			cursor = context.getContentResolver().query(contentUri,  proj, null, null, null);
			int column_index = cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
			cursor.moveToFirst();
 
			return cursor.getString(column_index);
		} finally {
			if (cursor != null) {
				cursor.close();
			}
		}
	}
 
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
 
		ExifInterface exif = null;
		int degree = 0;
 
		if (resultCode == RESULT_OK) {
			if (data == null) {
			} else {
				pictureUri = data.getData();
			}
			if (requestCode == PICK_PHOTO_REQUEST) {
 
				fileBytes = ImageVolumeResizing.reduceImageForUpload(ImageVolumeResizing.getByteArrayFromFile(this, pictureUri, product_image));
				try{
					exif = new ExifInterface(getRealPathFromURI(this, pictureUri));
					int exifOrientation = exif.getAttributeInt(
							ExifInterface.TAG_ORIENTATION, ExifInterface.ORIENTATION_NORMAL);
					degree = exifOrientationToDegrees(exifOrientation);
				}catch(Exception e){
					e.printStackTrace();
				}
				BitmapFactory.Options options = new BitmapFactory.Options();
				options.inPurgeable = true;
				options.inJustDecodeBounds = false;
				Bitmap b = BitmapFactory.decodeByteArray(fileBytes, 0, fileBytes.length, options);
 
				Matrix m = new Matrix();
				m.setRotate(degree, (float) b.getWidth() / 2, (float) b.getHeight() / 2);
 
				b = Bitmap.createBitmap(b, 0, 0, b.getWidth(), b.getHeight(), m, true);
 
				this.degree = ""+degree;
				Picasso.with(this).load(pictureUri).resize(640, 640).centerCrop().noFade().into(product_image);
 
			} else if (requestCode == TAKE_PHOTO_REQUEST) {
 
				Intent mediaScanIntent = new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE);
				mediaScanIntent.setData(pictureUri);
				sendBroadcast(mediaScanIntent);
 
				fileBytes = ImageVolumeResizing.reduceImageForUpload(ImageVolumeResizing
						.getByteArrayFromFile(this, pictureUri, product_image));
				try {
					exif = new ExifInterface(imagepath);
					int exifOrientation = exif.getAttributeInt(
							ExifInterface.TAG_ORIENTATION,
							ExifInterface.ORIENTATION_NORMAL);
					degree = exifOrientationToDegrees(exifOrientation);
				} catch (Exception e) {
					e.printStackTrace();
				}
				BitmapFactory.Options options = new BitmapFactory.Options();
				options.inPurgeable = true;
				options.inJustDecodeBounds = false;
				Bitmap b = BitmapFactory.decodeByteArray(fileBytes, 0, fileBytes.length, options);
 
				Matrix m = new Matrix();
				m.setRotate(degree, (float) b.getWidth() / 2,	(float) b.getHeight() / 2);
 
				b = Bitmap.createBitmap(b, 0, 0, b.getWidth(), b.getHeight(), m, true);
 
				this.degree = ""+degree;
				product_image.setImageBitmap(b);
			}
		} else if (resultCode != RESULT_CANCELED) {
			  return;
		}
	}
 
	class PictureUpload extends AsyncTask<String, Void, String> {
 
		public byte[] fileBytes;
		public Bitmap uploadBm;
		public Context context;
 
		public PictureUpload(Context context, byte[] file) {
			this.fileBytes = file;
			this.context = context;
		}
 
		@Override
		protected void onPreExecute() {
			mProgressDialog = new ProgressDialog(context);
			mProgressDialog.setTitle("Thank you");
			mProgressDialog.setMessage("Loading...");
			mProgressDialog.setCancelable(false);
			mProgressDialog.show();
		}
 
		@SuppressLint("SimpleDateFormat")
		@Override
		protected String doInBackground(String... params) {
			String url = params[0];
			String pro_name = params[1];
			String pro_detail = params[2];
			String pro_price = params[3];
			String pro_host = params[4];
			String pro_date = params[5];			
			String pro_type = params[6];
			String file_degree = params[7];
			try {
				Charset chars = Charset.forName("UTF-8");
 
				HttpClient client = new DefaultHttpClient();
 
				HttpPost post = new HttpPost(url);
 
				MultipartEntity multiPart = new MultipartEntity();
				multiPart.addPart("param1", new StringBody(pro_name, chars));
				multiPart.addPart("param2", new StringBody(pro_detail, chars));
				multiPart.addPart("param3", new StringBody(pro_price, chars));
				multiPart.addPart("param4", new StringBody(pro_host, chars));
				multiPart.addPart("param5", new StringBody(pro_date, chars));
				multiPart.addPart("param6", new StringBody(pro_type, chars));
				multiPart.addPart("param7", new StringBody(file_degree, chars));
				multiPart.addPart("param8", new StringBody(params[8], chars));
				multiPart.addPart("param9", new StringBody(params[9], chars));
				multiPart.addPart("param10", new StringBody(params[10], chars));
				multiPart.addPart("file1", new ByteArrayBody(fileBytes, pro_date + ".jpg"));
        // "file1" is the byte stored the iamge file and it will be sent to the server with text messages
				post.setEntity(multiPart);
				if(fileBytes.length > 0){
					client.execute(post);
				}else{
					return null;
				}
				
			} catch (Throwable t) {
				// Handle error here
				t.printStackTrace();
			}
			return null;
		}
 
		@Override
		protected void onPostExecute(String data) {
			mProgressDialog.dismiss();
			VariableManager.FLAG_PRODUCT = true;
			VariableManager.FLAG_USER = true;
			Intent intent = new Intent(EnrollProduct.this, Main.class);
			setResult(0, intent);
			finish();
		}
	}
 
	class dbHelper extends SQLiteOpenHelper {
 
		public dbHelper(Context context) {
			super(context, "userInfo.db", null, 1);
		}
 
		@Override
		public void onCreate(SQLiteDatabase db) {
			// CREATE
			db.execSQL("create table userInfo "
					+ "(_id integer primary key autoincrement, "
					+ "user_id text, " + "user_pw text, " + "user_pic text, "
					+ "user_date text);");
		}
 
		@Override
		public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
			// DROP
			db.execSQL(" drop table if exists userInfo ");
		}
 
	}
 
	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
 
		getMenuInflater().inflate(R.menu.share_menu, menu);
 
		MenuItem item = menu.findItem(R.id.menu_item_share);
		
		return true;
	}
 
}
